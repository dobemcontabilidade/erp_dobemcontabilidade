package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ServicoContabilAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServicoContabilAllPropertiesEquals(ServicoContabil expected, ServicoContabil actual) {
        assertServicoContabilAutoGeneratedPropertiesEquals(expected, actual);
        assertServicoContabilAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServicoContabilAllUpdatablePropertiesEquals(ServicoContabil expected, ServicoContabil actual) {
        assertServicoContabilUpdatableFieldsEquals(expected, actual);
        assertServicoContabilUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServicoContabilAutoGeneratedPropertiesEquals(ServicoContabil expected, ServicoContabil actual) {
        assertThat(expected)
            .as("Verify ServicoContabil auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServicoContabilUpdatableFieldsEquals(ServicoContabil expected, ServicoContabil actual) {
        assertThat(expected)
            .as("Verify ServicoContabil relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getValor()).as("check valor").isEqualTo(actual.getValor()))
            .satisfies(e -> assertThat(e.getDescricao()).as("check descricao").isEqualTo(actual.getDescricao()))
            .satisfies(e -> assertThat(e.getDiasExecucao()).as("check diasExecucao").isEqualTo(actual.getDiasExecucao()))
            .satisfies(e -> assertThat(e.getGeraMulta()).as("check geraMulta").isEqualTo(actual.getGeraMulta()))
            .satisfies(e -> assertThat(e.getPeriodoExecucao()).as("check periodoExecucao").isEqualTo(actual.getPeriodoExecucao()))
            .satisfies(e -> assertThat(e.getDiaLegal()).as("check diaLegal").isEqualTo(actual.getDiaLegal()))
            .satisfies(e -> assertThat(e.getMesLegal()).as("check mesLegal").isEqualTo(actual.getMesLegal()))
            .satisfies(e -> assertThat(e.getValorRefMulta()).as("check valorRefMulta").isEqualTo(actual.getValorRefMulta()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServicoContabilUpdatableRelationshipsEquals(ServicoContabil expected, ServicoContabil actual) {
        assertThat(expected)
            .as("Verify ServicoContabil relationships")
            .satisfies(e -> assertThat(e.getAreaContabil()).as("check areaContabil").isEqualTo(actual.getAreaContabil()))
            .satisfies(e -> assertThat(e.getEsfera()).as("check esfera").isEqualTo(actual.getEsfera()));
    }
}
