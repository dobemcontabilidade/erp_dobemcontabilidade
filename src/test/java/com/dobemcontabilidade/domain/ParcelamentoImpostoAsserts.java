package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ParcelamentoImpostoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParcelamentoImpostoAllPropertiesEquals(ParcelamentoImposto expected, ParcelamentoImposto actual) {
        assertParcelamentoImpostoAutoGeneratedPropertiesEquals(expected, actual);
        assertParcelamentoImpostoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParcelamentoImpostoAllUpdatablePropertiesEquals(ParcelamentoImposto expected, ParcelamentoImposto actual) {
        assertParcelamentoImpostoUpdatableFieldsEquals(expected, actual);
        assertParcelamentoImpostoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParcelamentoImpostoAutoGeneratedPropertiesEquals(ParcelamentoImposto expected, ParcelamentoImposto actual) {
        assertThat(expected)
            .as("Verify ParcelamentoImposto auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParcelamentoImpostoUpdatableFieldsEquals(ParcelamentoImposto expected, ParcelamentoImposto actual) {
        assertThat(expected)
            .as("Verify ParcelamentoImposto relevant properties")
            .satisfies(e -> assertThat(e.getDiaVencimento()).as("check diaVencimento").isEqualTo(actual.getDiaVencimento()))
            .satisfies(e -> assertThat(e.getNumeroParcelas()).as("check numeroParcelas").isEqualTo(actual.getNumeroParcelas()))
            .satisfies(
                e -> assertThat(e.getUrlArquivoNegociacao()).as("check urlArquivoNegociacao").isEqualTo(actual.getUrlArquivoNegociacao())
            )
            .satisfies(
                e -> assertThat(e.getNumeroParcelasPagas()).as("check numeroParcelasPagas").isEqualTo(actual.getNumeroParcelasPagas())
            )
            .satisfies(
                e ->
                    assertThat(e.getNumeroParcelasRegatantes())
                        .as("check numeroParcelasRegatantes")
                        .isEqualTo(actual.getNumeroParcelasRegatantes())
            )
            .satisfies(
                e ->
                    assertThat(e.getSituacaoSolicitacaoParcelamentoEnum())
                        .as("check situacaoSolicitacaoParcelamentoEnum")
                        .isEqualTo(actual.getSituacaoSolicitacaoParcelamentoEnum())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParcelamentoImpostoUpdatableRelationshipsEquals(ParcelamentoImposto expected, ParcelamentoImposto actual) {
        assertThat(expected)
            .as("Verify ParcelamentoImposto relationships")
            .satisfies(e -> assertThat(e.getImposto()).as("check imposto").isEqualTo(actual.getImposto()))
            .satisfies(e -> assertThat(e.getEmpresa()).as("check empresa").isEqualTo(actual.getEmpresa()));
    }
}
