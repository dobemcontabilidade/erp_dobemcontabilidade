package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EmpresaVinculadaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpresaVinculadaAllPropertiesEquals(EmpresaVinculada expected, EmpresaVinculada actual) {
        assertEmpresaVinculadaAutoGeneratedPropertiesEquals(expected, actual);
        assertEmpresaVinculadaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpresaVinculadaAllUpdatablePropertiesEquals(EmpresaVinculada expected, EmpresaVinculada actual) {
        assertEmpresaVinculadaUpdatableFieldsEquals(expected, actual);
        assertEmpresaVinculadaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpresaVinculadaAutoGeneratedPropertiesEquals(EmpresaVinculada expected, EmpresaVinculada actual) {
        assertThat(expected)
            .as("Verify EmpresaVinculada auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpresaVinculadaUpdatableFieldsEquals(EmpresaVinculada expected, EmpresaVinculada actual) {
        assertThat(expected)
            .as("Verify EmpresaVinculada relevant properties")
            .satisfies(e -> assertThat(e.getNomeEmpresa()).as("check nomeEmpresa").isEqualTo(actual.getNomeEmpresa()))
            .satisfies(e -> assertThat(e.getCnpj()).as("check cnpj").isEqualTo(actual.getCnpj()))
            .satisfies(e -> assertThat(e.getRemuneracaoEmpresa()).as("check remuneracaoEmpresa").isEqualTo(actual.getRemuneracaoEmpresa()))
            .satisfies(e -> assertThat(e.getObservacoes()).as("check observacoes").isEqualTo(actual.getObservacoes()))
            .satisfies(e -> assertThat(e.getSalarioFixo()).as("check salarioFixo").isEqualTo(actual.getSalarioFixo()))
            .satisfies(e -> assertThat(e.getSalarioVariavel()).as("check salarioVariavel").isEqualTo(actual.getSalarioVariavel()))
            .satisfies(e -> assertThat(e.getValorSalarioFixo()).as("check valorSalarioFixo").isEqualTo(actual.getValorSalarioFixo()))
            .satisfies(
                e -> assertThat(e.getDataTerminoContrato()).as("check dataTerminoContrato").isEqualTo(actual.getDataTerminoContrato())
            )
            .satisfies(e -> assertThat(e.getNumeroInscricao()).as("check numeroInscricao").isEqualTo(actual.getNumeroInscricao()))
            .satisfies(e -> assertThat(e.getCodigoLotacao()).as("check codigoLotacao").isEqualTo(actual.getCodigoLotacao()))
            .satisfies(
                e -> assertThat(e.getDescricaoComplementar()).as("check descricaoComplementar").isEqualTo(actual.getDescricaoComplementar())
            )
            .satisfies(e -> assertThat(e.getDescricaoCargo()).as("check descricaoCargo").isEqualTo(actual.getDescricaoCargo()))
            .satisfies(
                e ->
                    assertThat(e.getObservacaoJornadaTrabalho())
                        .as("check observacaoJornadaTrabalho")
                        .isEqualTo(actual.getObservacaoJornadaTrabalho())
            )
            .satisfies(
                e ->
                    assertThat(e.getMediaHorasTrabalhadasSemana())
                        .as("check mediaHorasTrabalhadasSemana")
                        .isEqualTo(actual.getMediaHorasTrabalhadasSemana())
            )
            .satisfies(
                e -> assertThat(e.getRegimePrevidenciario()).as("check regimePrevidenciario").isEqualTo(actual.getRegimePrevidenciario())
            )
            .satisfies(
                e ->
                    assertThat(e.getUnidadePagamentoSalario())
                        .as("check unidadePagamentoSalario")
                        .isEqualTo(actual.getUnidadePagamentoSalario())
            )
            .satisfies(e -> assertThat(e.getJornadaEspecial()).as("check jornadaEspecial").isEqualTo(actual.getJornadaEspecial()))
            .satisfies(
                e ->
                    assertThat(e.getTipoInscricaoEmpresaVinculada())
                        .as("check tipoInscricaoEmpresaVinculada")
                        .isEqualTo(actual.getTipoInscricaoEmpresaVinculada())
            )
            .satisfies(
                e -> assertThat(e.getTipoContratoTrabalho()).as("check tipoContratoTrabalho").isEqualTo(actual.getTipoContratoTrabalho())
            )
            .satisfies(e -> assertThat(e.getTipoRegimeTrabalho()).as("check tipoRegimeTrabalho").isEqualTo(actual.getTipoRegimeTrabalho()))
            .satisfies(e -> assertThat(e.getDiasDaSemana()).as("check diasDaSemana").isEqualTo(actual.getDiasDaSemana()))
            .satisfies(
                e ->
                    assertThat(e.getTipoJornadaEmpresaVinculada())
                        .as("check tipoJornadaEmpresaVinculada")
                        .isEqualTo(actual.getTipoJornadaEmpresaVinculada())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpresaVinculadaUpdatableRelationshipsEquals(EmpresaVinculada expected, EmpresaVinculada actual) {
        assertThat(expected)
            .as("Verify EmpresaVinculada relationships")
            .satisfies(e -> assertThat(e.getFuncionario()).as("check funcionario").isEqualTo(actual.getFuncionario()));
    }
}
