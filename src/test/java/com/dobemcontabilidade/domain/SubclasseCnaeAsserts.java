package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SubclasseCnaeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubclasseCnaeAllPropertiesEquals(SubclasseCnae expected, SubclasseCnae actual) {
        assertSubclasseCnaeAutoGeneratedPropertiesEquals(expected, actual);
        assertSubclasseCnaeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubclasseCnaeAllUpdatablePropertiesEquals(SubclasseCnae expected, SubclasseCnae actual) {
        assertSubclasseCnaeUpdatableFieldsEquals(expected, actual);
        assertSubclasseCnaeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubclasseCnaeAutoGeneratedPropertiesEquals(SubclasseCnae expected, SubclasseCnae actual) {
        assertThat(expected)
            .as("Verify SubclasseCnae auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubclasseCnaeUpdatableFieldsEquals(SubclasseCnae expected, SubclasseCnae actual) {
        assertThat(expected)
            .as("Verify SubclasseCnae relevant properties")
            .satisfies(e -> assertThat(e.getCodigo()).as("check codigo").isEqualTo(actual.getCodigo()))
            .satisfies(e -> assertThat(e.getDescricao()).as("check descricao").isEqualTo(actual.getDescricao()))
            .satisfies(e -> assertThat(e.getAnexo()).as("check anexo").isEqualTo(actual.getAnexo()))
            .satisfies(e -> assertThat(e.getAtendidoFreemium()).as("check atendidoFreemium").isEqualTo(actual.getAtendidoFreemium()))
            .satisfies(e -> assertThat(e.getAtendido()).as("check atendido").isEqualTo(actual.getAtendido()))
            .satisfies(e -> assertThat(e.getOptanteSimples()).as("check optanteSimples").isEqualTo(actual.getOptanteSimples()))
            .satisfies(e -> assertThat(e.getAceitaMEI()).as("check aceitaMEI").isEqualTo(actual.getAceitaMEI()))
            .satisfies(e -> assertThat(e.getCategoria()).as("check categoria").isEqualTo(actual.getCategoria()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubclasseCnaeUpdatableRelationshipsEquals(SubclasseCnae expected, SubclasseCnae actual) {
        assertThat(expected)
            .as("Verify SubclasseCnae relationships")
            .satisfies(e -> assertThat(e.getClasse()).as("check classe").isEqualTo(actual.getClasse()))
            .satisfies(e -> assertThat(e.getSegmentoCnaes()).as("check segmentoCnaes").isEqualTo(actual.getSegmentoCnaes()));
    }
}
