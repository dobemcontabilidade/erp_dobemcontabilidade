package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SegmentoCnaeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSegmentoCnaeAllPropertiesEquals(SegmentoCnae expected, SegmentoCnae actual) {
        assertSegmentoCnaeAutoGeneratedPropertiesEquals(expected, actual);
        assertSegmentoCnaeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSegmentoCnaeAllUpdatablePropertiesEquals(SegmentoCnae expected, SegmentoCnae actual) {
        assertSegmentoCnaeUpdatableFieldsEquals(expected, actual);
        assertSegmentoCnaeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSegmentoCnaeAutoGeneratedPropertiesEquals(SegmentoCnae expected, SegmentoCnae actual) {
        assertThat(expected)
            .as("Verify SegmentoCnae auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSegmentoCnaeUpdatableFieldsEquals(SegmentoCnae expected, SegmentoCnae actual) {
        assertThat(expected)
            .as("Verify SegmentoCnae relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getDescricao()).as("check descricao").isEqualTo(actual.getDescricao()))
            .satisfies(e -> assertThat(e.getIcon()).as("check icon").isEqualTo(actual.getIcon()))
            .satisfies(e -> assertThat(e.getImagem()).as("check imagem").isEqualTo(actual.getImagem()))
            .satisfies(e -> assertThat(e.getTags()).as("check tags").isEqualTo(actual.getTags()))
            .satisfies(e -> assertThat(e.getTipo()).as("check tipo").isEqualTo(actual.getTipo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSegmentoCnaeUpdatableRelationshipsEquals(SegmentoCnae expected, SegmentoCnae actual) {
        assertThat(expected)
            .as("Verify SegmentoCnae relationships")
            .satisfies(e -> assertThat(e.getSubclasseCnaes()).as("check subclasseCnaes").isEqualTo(actual.getSubclasseCnaes()))
            .satisfies(e -> assertThat(e.getRamo()).as("check ramo").isEqualTo(actual.getRamo()))
            .satisfies(e -> assertThat(e.getEmpresas()).as("check empresas").isEqualTo(actual.getEmpresas()));
    }
}
