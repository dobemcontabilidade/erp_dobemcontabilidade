package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FuncionalidadeGrupoAcessoEmpresaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionalidadeGrupoAcessoEmpresaAllPropertiesEquals(
        FuncionalidadeGrupoAcessoEmpresa expected,
        FuncionalidadeGrupoAcessoEmpresa actual
    ) {
        assertFuncionalidadeGrupoAcessoEmpresaAutoGeneratedPropertiesEquals(expected, actual);
        assertFuncionalidadeGrupoAcessoEmpresaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionalidadeGrupoAcessoEmpresaAllUpdatablePropertiesEquals(
        FuncionalidadeGrupoAcessoEmpresa expected,
        FuncionalidadeGrupoAcessoEmpresa actual
    ) {
        assertFuncionalidadeGrupoAcessoEmpresaUpdatableFieldsEquals(expected, actual);
        assertFuncionalidadeGrupoAcessoEmpresaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionalidadeGrupoAcessoEmpresaAutoGeneratedPropertiesEquals(
        FuncionalidadeGrupoAcessoEmpresa expected,
        FuncionalidadeGrupoAcessoEmpresa actual
    ) {
        assertThat(expected)
            .as("Verify FuncionalidadeGrupoAcessoEmpresa auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionalidadeGrupoAcessoEmpresaUpdatableFieldsEquals(
        FuncionalidadeGrupoAcessoEmpresa expected,
        FuncionalidadeGrupoAcessoEmpresa actual
    ) {
        assertThat(expected)
            .as("Verify FuncionalidadeGrupoAcessoEmpresa relevant properties")
            .satisfies(e -> assertThat(e.getAtiva()).as("check ativa").isEqualTo(actual.getAtiva()))
            .satisfies(e -> assertThat(e.getDataExpiracao()).as("check dataExpiracao").isEqualTo(actual.getDataExpiracao()))
            .satisfies(e -> assertThat(e.getIlimitado()).as("check ilimitado").isEqualTo(actual.getIlimitado()))
            .satisfies(e -> assertThat(e.getDesabilitar()).as("check desabilitar").isEqualTo(actual.getDesabilitar()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionalidadeGrupoAcessoEmpresaUpdatableRelationshipsEquals(
        FuncionalidadeGrupoAcessoEmpresa expected,
        FuncionalidadeGrupoAcessoEmpresa actual
    ) {
        assertThat(expected)
            .as("Verify FuncionalidadeGrupoAcessoEmpresa relationships")
            .satisfies(e -> assertThat(e.getFuncionalidade()).as("check funcionalidade").isEqualTo(actual.getFuncionalidade()))
            .satisfies(e -> assertThat(e.getGrupoAcessoEmpresa()).as("check grupoAcessoEmpresa").isEqualTo(actual.getGrupoAcessoEmpresa()))
            .satisfies(e -> assertThat(e.getPermisao()).as("check permisao").isEqualTo(actual.getPermisao()));
    }
}
