package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GrupoAcessoEmpresaUsuarioContadorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGrupoAcessoEmpresaUsuarioContadorAllPropertiesEquals(
        GrupoAcessoEmpresaUsuarioContador expected,
        GrupoAcessoEmpresaUsuarioContador actual
    ) {
        assertGrupoAcessoEmpresaUsuarioContadorAutoGeneratedPropertiesEquals(expected, actual);
        assertGrupoAcessoEmpresaUsuarioContadorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGrupoAcessoEmpresaUsuarioContadorAllUpdatablePropertiesEquals(
        GrupoAcessoEmpresaUsuarioContador expected,
        GrupoAcessoEmpresaUsuarioContador actual
    ) {
        assertGrupoAcessoEmpresaUsuarioContadorUpdatableFieldsEquals(expected, actual);
        assertGrupoAcessoEmpresaUsuarioContadorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGrupoAcessoEmpresaUsuarioContadorAutoGeneratedPropertiesEquals(
        GrupoAcessoEmpresaUsuarioContador expected,
        GrupoAcessoEmpresaUsuarioContador actual
    ) {
        assertThat(expected)
            .as("Verify GrupoAcessoEmpresaUsuarioContador auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGrupoAcessoEmpresaUsuarioContadorUpdatableFieldsEquals(
        GrupoAcessoEmpresaUsuarioContador expected,
        GrupoAcessoEmpresaUsuarioContador actual
    ) {
        assertThat(expected)
            .as("Verify GrupoAcessoEmpresaUsuarioContador relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getDataExpiracao()).as("check dataExpiracao").isEqualTo(actual.getDataExpiracao()))
            .satisfies(e -> assertThat(e.getIlimitado()).as("check ilimitado").isEqualTo(actual.getIlimitado()))
            .satisfies(e -> assertThat(e.getDesabilitar()).as("check desabilitar").isEqualTo(actual.getDesabilitar()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGrupoAcessoEmpresaUsuarioContadorUpdatableRelationshipsEquals(
        GrupoAcessoEmpresaUsuarioContador expected,
        GrupoAcessoEmpresaUsuarioContador actual
    ) {
        assertThat(expected)
            .as("Verify GrupoAcessoEmpresaUsuarioContador relationships")
            .satisfies(e -> assertThat(e.getUsuarioContador()).as("check usuarioContador").isEqualTo(actual.getUsuarioContador()))
            .satisfies(e -> assertThat(e.getPermisao()).as("check permisao").isEqualTo(actual.getPermisao()))
            .satisfies(e -> assertThat(e.getGrupoAcessoEmpresa()).as("check grupoAcessoEmpresa").isEqualTo(actual.getGrupoAcessoEmpresa()));
    }
}
