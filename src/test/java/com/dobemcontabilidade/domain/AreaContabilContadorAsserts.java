package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AreaContabilContadorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAreaContabilContadorAllPropertiesEquals(AreaContabilContador expected, AreaContabilContador actual) {
        assertAreaContabilContadorAutoGeneratedPropertiesEquals(expected, actual);
        assertAreaContabilContadorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAreaContabilContadorAllUpdatablePropertiesEquals(AreaContabilContador expected, AreaContabilContador actual) {
        assertAreaContabilContadorUpdatableFieldsEquals(expected, actual);
        assertAreaContabilContadorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAreaContabilContadorAutoGeneratedPropertiesEquals(AreaContabilContador expected, AreaContabilContador actual) {
        assertThat(expected)
            .as("Verify AreaContabilContador auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAreaContabilContadorUpdatableFieldsEquals(AreaContabilContador expected, AreaContabilContador actual) {
        assertThat(expected)
            .as("Verify AreaContabilContador relevant properties")
            .satisfies(
                e -> assertThat(e.getPercentualExperiencia()).as("check percentualExperiencia").isEqualTo(actual.getPercentualExperiencia())
            )
            .satisfies(
                e -> assertThat(e.getDescricaoExperiencia()).as("check descricaoExperiencia").isEqualTo(actual.getDescricaoExperiencia())
            )
            .satisfies(e -> assertThat(e.getAtivo()).as("check ativo").isEqualTo(actual.getAtivo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAreaContabilContadorUpdatableRelationshipsEquals(AreaContabilContador expected, AreaContabilContador actual) {
        assertThat(expected)
            .as("Verify AreaContabilContador relationships")
            .satisfies(e -> assertThat(e.getContador()).as("check contador").isEqualTo(actual.getContador()))
            .satisfies(e -> assertThat(e.getAreaContabil()).as("check areaContabil").isEqualTo(actual.getAreaContabil()));
    }
}
