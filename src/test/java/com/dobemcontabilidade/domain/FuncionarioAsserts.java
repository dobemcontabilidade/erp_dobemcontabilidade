package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FuncionarioAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionarioAllPropertiesEquals(Funcionario expected, Funcionario actual) {
        assertFuncionarioAutoGeneratedPropertiesEquals(expected, actual);
        assertFuncionarioAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionarioAllUpdatablePropertiesEquals(Funcionario expected, Funcionario actual) {
        assertFuncionarioUpdatableFieldsEquals(expected, actual);
        assertFuncionarioUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionarioAutoGeneratedPropertiesEquals(Funcionario expected, Funcionario actual) {
        assertThat(expected)
            .as("Verify Funcionario auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionarioUpdatableFieldsEquals(Funcionario expected, Funcionario actual) {
        assertThat(expected)
            .as("Verify Funcionario relevant properties")
            .satisfies(e -> assertThat(e.getNumeroPisNisPasep()).as("check numeroPisNisPasep").isEqualTo(actual.getNumeroPisNisPasep()))
            .satisfies(e -> assertThat(e.getReintegrado()).as("check reintegrado").isEqualTo(actual.getReintegrado()))
            .satisfies(e -> assertThat(e.getPrimeiroEmprego()).as("check primeiroEmprego").isEqualTo(actual.getPrimeiroEmprego()))
            .satisfies(e -> assertThat(e.getMultiploVinculos()).as("check multiploVinculos").isEqualTo(actual.getMultiploVinculos()))
            .satisfies(e -> assertThat(e.getDataOpcaoFgts()).as("check dataOpcaoFgts").isEqualTo(actual.getDataOpcaoFgts()))
            .satisfies(e -> assertThat(e.getFiliacaoSindical()).as("check filiacaoSindical").isEqualTo(actual.getFiliacaoSindical()))
            .satisfies(e -> assertThat(e.getCnpjSindicato()).as("check cnpjSindicato").isEqualTo(actual.getCnpjSindicato()))
            .satisfies(
                e -> assertThat(e.getTipoFuncionarioEnum()).as("check tipoFuncionarioEnum").isEqualTo(actual.getTipoFuncionarioEnum())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionarioUpdatableRelationshipsEquals(Funcionario expected, Funcionario actual) {
        assertThat(expected)
            .as("Verify Funcionario relationships")
            .satisfies(e -> assertThat(e.getUsuarioEmpresa()).as("check usuarioEmpresa").isEqualTo(actual.getUsuarioEmpresa()))
            .satisfies(e -> assertThat(e.getPessoa()).as("check pessoa").isEqualTo(actual.getPessoa()))
            .satisfies(e -> assertThat(e.getEmpresa()).as("check empresa").isEqualTo(actual.getEmpresa()))
            .satisfies(e -> assertThat(e.getProfissao()).as("check profissao").isEqualTo(actual.getProfissao()));
    }
}
