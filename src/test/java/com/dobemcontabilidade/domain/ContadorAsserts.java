package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContadorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContadorAllPropertiesEquals(Contador expected, Contador actual) {
        assertContadorAutoGeneratedPropertiesEquals(expected, actual);
        assertContadorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContadorAllUpdatablePropertiesEquals(Contador expected, Contador actual) {
        assertContadorUpdatableFieldsEquals(expected, actual);
        assertContadorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContadorAutoGeneratedPropertiesEquals(Contador expected, Contador actual) {
        assertThat(expected)
            .as("Verify Contador auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContadorUpdatableFieldsEquals(Contador expected, Contador actual) {
        assertThat(expected)
            .as("Verify Contador relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getCrc()).as("check crc").isEqualTo(actual.getCrc()))
            .satisfies(e -> assertThat(e.getLimiteEmpresas()).as("check limiteEmpresas").isEqualTo(actual.getLimiteEmpresas()))
            .satisfies(
                e -> assertThat(e.getLimiteAreaContabils()).as("check limiteAreaContabils").isEqualTo(actual.getLimiteAreaContabils())
            )
            .satisfies(e -> assertThat(e.getLimiteFaturamento()).as("check limiteFaturamento").isEqualTo(actual.getLimiteFaturamento()))
            .satisfies(
                e -> assertThat(e.getLimiteDepartamentos()).as("check limiteDepartamentos").isEqualTo(actual.getLimiteDepartamentos())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContadorUpdatableRelationshipsEquals(Contador expected, Contador actual) {
        assertThat(expected)
            .as("Verify Contador relationships")
            .satisfies(e -> assertThat(e.getPessoa()).as("check pessoa").isEqualTo(actual.getPessoa()))
            .satisfies(e -> assertThat(e.getPerfilContador()).as("check perfilContador").isEqualTo(actual.getPerfilContador()));
    }
}
