package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContadorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContadorAllPropertiesEquals(Contador expected, Contador actual) {
        assertContadorAutoGeneratedPropertiesEquals(expected, actual);
        assertContadorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContadorAllUpdatablePropertiesEquals(Contador expected, Contador actual) {
        assertContadorUpdatableFieldsEquals(expected, actual);
        assertContadorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContadorAutoGeneratedPropertiesEquals(Contador expected, Contador actual) {
        assertThat(expected)
            .as("Verify Contador auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContadorUpdatableFieldsEquals(Contador expected, Contador actual) {
        assertThat(expected)
            .as("Verify Contador relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getCpf()).as("check cpf").isEqualTo(actual.getCpf()))
            .satisfies(e -> assertThat(e.getDataNascimento()).as("check dataNascimento").isEqualTo(actual.getDataNascimento()))
            .satisfies(e -> assertThat(e.getTituloEleitor()).as("check tituloEleitor").isEqualTo(actual.getTituloEleitor()))
            .satisfies(e -> assertThat(e.getRg()).as("check rg").isEqualTo(actual.getRg()))
            .satisfies(e -> assertThat(e.getRgOrgaoExpeditor()).as("check rgOrgaoExpeditor").isEqualTo(actual.getRgOrgaoExpeditor()))
            .satisfies(e -> assertThat(e.getRgUfExpedicao()).as("check rgUfExpedicao").isEqualTo(actual.getRgUfExpedicao()))
            .satisfies(e -> assertThat(e.getNomeMae()).as("check nomeMae").isEqualTo(actual.getNomeMae()))
            .satisfies(e -> assertThat(e.getNomePai()).as("check nomePai").isEqualTo(actual.getNomePai()))
            .satisfies(e -> assertThat(e.getLocalNascimento()).as("check localNascimento").isEqualTo(actual.getLocalNascimento()))
            .satisfies(e -> assertThat(e.getRacaECor()).as("check racaECor").isEqualTo(actual.getRacaECor()))
            .satisfies(
                e -> assertThat(e.getPessoaComDeficiencia()).as("check pessoaComDeficiencia").isEqualTo(actual.getPessoaComDeficiencia())
            )
            .satisfies(e -> assertThat(e.getEstadoCivil()).as("check estadoCivil").isEqualTo(actual.getEstadoCivil()))
            .satisfies(e -> assertThat(e.getSexo()).as("check sexo").isEqualTo(actual.getSexo()))
            .satisfies(e -> assertThat(e.getUrlFotoPerfil()).as("check urlFotoPerfil").isEqualTo(actual.getUrlFotoPerfil()))
            .satisfies(e -> assertThat(e.getRgOrgaoExpditor()).as("check rgOrgaoExpditor").isEqualTo(actual.getRgOrgaoExpditor()))
            .satisfies(e -> assertThat(e.getCrc()).as("check crc").isEqualTo(actual.getCrc()))
            .satisfies(e -> assertThat(e.getLimiteEmpresas()).as("check limiteEmpresas").isEqualTo(actual.getLimiteEmpresas()))
            .satisfies(
                e -> assertThat(e.getLimiteAreaContabils()).as("check limiteAreaContabils").isEqualTo(actual.getLimiteAreaContabils())
            )
            .satisfies(e -> assertThat(e.getLimiteFaturamento()).as("check limiteFaturamento").isEqualTo(actual.getLimiteFaturamento()))
            .satisfies(
                e -> assertThat(e.getLimiteDepartamentos()).as("check limiteDepartamentos").isEqualTo(actual.getLimiteDepartamentos())
            )
            .satisfies(e -> assertThat(e.getSituacaoContador()).as("check situacaoContador").isEqualTo(actual.getSituacaoContador()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContadorUpdatableRelationshipsEquals(Contador expected, Contador actual) {}
}
