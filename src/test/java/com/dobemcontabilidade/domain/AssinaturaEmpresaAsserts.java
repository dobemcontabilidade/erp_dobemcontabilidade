package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AssinaturaEmpresaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssinaturaEmpresaAllPropertiesEquals(AssinaturaEmpresa expected, AssinaturaEmpresa actual) {
        assertAssinaturaEmpresaAutoGeneratedPropertiesEquals(expected, actual);
        assertAssinaturaEmpresaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssinaturaEmpresaAllUpdatablePropertiesEquals(AssinaturaEmpresa expected, AssinaturaEmpresa actual) {
        assertAssinaturaEmpresaUpdatableFieldsEquals(expected, actual);
        assertAssinaturaEmpresaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssinaturaEmpresaAutoGeneratedPropertiesEquals(AssinaturaEmpresa expected, AssinaturaEmpresa actual) {
        assertThat(expected)
            .as("Verify AssinaturaEmpresa auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssinaturaEmpresaUpdatableFieldsEquals(AssinaturaEmpresa expected, AssinaturaEmpresa actual) {
        assertThat(expected)
            .as("Verify AssinaturaEmpresa relevant properties")
            .satisfies(e -> assertThat(e.getRazaoSocial()).as("check razaoSocial").isEqualTo(actual.getRazaoSocial()))
            .satisfies(e -> assertThat(e.getCodigoAssinatura()).as("check codigoAssinatura").isEqualTo(actual.getCodigoAssinatura()))
            .satisfies(e -> assertThat(e.getValorEnquadramento()).as("check valorEnquadramento").isEqualTo(actual.getValorEnquadramento()))
            .satisfies(e -> assertThat(e.getValorTributacao()).as("check valorTributacao").isEqualTo(actual.getValorTributacao()))
            .satisfies(e -> assertThat(e.getValorRamo()).as("check valorRamo").isEqualTo(actual.getValorRamo()))
            .satisfies(e -> assertThat(e.getValorFuncionarios()).as("check valorFuncionarios").isEqualTo(actual.getValorFuncionarios()))
            .satisfies(e -> assertThat(e.getValorSocios()).as("check valorSocios").isEqualTo(actual.getValorSocios()))
            .satisfies(e -> assertThat(e.getValorFaturamento()).as("check valorFaturamento").isEqualTo(actual.getValorFaturamento()))
            .satisfies(e -> assertThat(e.getValorPlanoContabil()).as("check valorPlanoContabil").isEqualTo(actual.getValorPlanoContabil()))
            .satisfies(
                e ->
                    assertThat(e.getValorPlanoContabilComDesconto())
                        .as("check valorPlanoContabilComDesconto")
                        .isEqualTo(actual.getValorPlanoContabilComDesconto())
            )
            .satisfies(
                e ->
                    assertThat(e.getValorPlanoContaAzulComDesconto())
                        .as("check valorPlanoContaAzulComDesconto")
                        .isEqualTo(actual.getValorPlanoContaAzulComDesconto())
            )
            .satisfies(e -> assertThat(e.getValorMensalidade()).as("check valorMensalidade").isEqualTo(actual.getValorMensalidade()))
            .satisfies(e -> assertThat(e.getValorPeriodo()).as("check valorPeriodo").isEqualTo(actual.getValorPeriodo()))
            .satisfies(e -> assertThat(e.getValorAno()).as("check valorAno").isEqualTo(actual.getValorAno()))
            .satisfies(e -> assertThat(e.getDataContratacao()).as("check dataContratacao").isEqualTo(actual.getDataContratacao()))
            .satisfies(e -> assertThat(e.getDataEncerramento()).as("check dataEncerramento").isEqualTo(actual.getDataEncerramento()))
            .satisfies(e -> assertThat(e.getDiaVencimento()).as("check diaVencimento").isEqualTo(actual.getDiaVencimento()))
            .satisfies(e -> assertThat(e.getSituacao()).as("check situacao").isEqualTo(actual.getSituacao()))
            .satisfies(e -> assertThat(e.getTipoContrato()).as("check tipoContrato").isEqualTo(actual.getTipoContrato()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssinaturaEmpresaUpdatableRelationshipsEquals(AssinaturaEmpresa expected, AssinaturaEmpresa actual) {
        assertThat(expected)
            .as("Verify AssinaturaEmpresa relationships")
            .satisfies(e -> assertThat(e.getPeriodoPagamento()).as("check periodoPagamento").isEqualTo(actual.getPeriodoPagamento()))
            .satisfies(e -> assertThat(e.getFormaDePagamento()).as("check formaDePagamento").isEqualTo(actual.getFormaDePagamento()))
            .satisfies(e -> assertThat(e.getEmpresa()).as("check empresa").isEqualTo(actual.getEmpresa()));
    }
}
