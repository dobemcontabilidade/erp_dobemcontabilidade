package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DependentesFuncionarioAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDependentesFuncionarioAllPropertiesEquals(DependentesFuncionario expected, DependentesFuncionario actual) {
        assertDependentesFuncionarioAutoGeneratedPropertiesEquals(expected, actual);
        assertDependentesFuncionarioAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDependentesFuncionarioAllUpdatablePropertiesEquals(
        DependentesFuncionario expected,
        DependentesFuncionario actual
    ) {
        assertDependentesFuncionarioUpdatableFieldsEquals(expected, actual);
        assertDependentesFuncionarioUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDependentesFuncionarioAutoGeneratedPropertiesEquals(
        DependentesFuncionario expected,
        DependentesFuncionario actual
    ) {
        assertThat(expected)
            .as("Verify DependentesFuncionario auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDependentesFuncionarioUpdatableFieldsEquals(DependentesFuncionario expected, DependentesFuncionario actual) {
        assertThat(expected)
            .as("Verify DependentesFuncionario relevant properties")
            .satisfies(
                e -> assertThat(e.getUrlCertidaoDependente()).as("check urlCertidaoDependente").isEqualTo(actual.getUrlCertidaoDependente())
            )
            .satisfies(e -> assertThat(e.getUrlRgDependente()).as("check urlRgDependente").isEqualTo(actual.getUrlRgDependente()))
            .satisfies(e -> assertThat(e.getDependenteIRRF()).as("check dependenteIRRF").isEqualTo(actual.getDependenteIRRF()))
            .satisfies(
                e ->
                    assertThat(e.getDependenteSalarioFamilia())
                        .as("check dependenteSalarioFamilia")
                        .isEqualTo(actual.getDependenteSalarioFamilia())
            )
            .satisfies(
                e ->
                    assertThat(e.getTipoDependenteFuncionarioEnum())
                        .as("check tipoDependenteFuncionarioEnum")
                        .isEqualTo(actual.getTipoDependenteFuncionarioEnum())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDependentesFuncionarioUpdatableRelationshipsEquals(
        DependentesFuncionario expected,
        DependentesFuncionario actual
    ) {
        assertThat(expected)
            .as("Verify DependentesFuncionario relationships")
            .satisfies(e -> assertThat(e.getPessoa()).as("check pessoa").isEqualTo(actual.getPessoa()))
            .satisfies(e -> assertThat(e.getFuncionario()).as("check funcionario").isEqualTo(actual.getFuncionario()));
    }
}
