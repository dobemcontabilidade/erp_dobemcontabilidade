package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DemissaoFuncionarioAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemissaoFuncionarioAllPropertiesEquals(DemissaoFuncionario expected, DemissaoFuncionario actual) {
        assertDemissaoFuncionarioAutoGeneratedPropertiesEquals(expected, actual);
        assertDemissaoFuncionarioAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemissaoFuncionarioAllUpdatablePropertiesEquals(DemissaoFuncionario expected, DemissaoFuncionario actual) {
        assertDemissaoFuncionarioUpdatableFieldsEquals(expected, actual);
        assertDemissaoFuncionarioUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemissaoFuncionarioAutoGeneratedPropertiesEquals(DemissaoFuncionario expected, DemissaoFuncionario actual) {
        assertThat(expected)
            .as("Verify DemissaoFuncionario auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemissaoFuncionarioUpdatableFieldsEquals(DemissaoFuncionario expected, DemissaoFuncionario actual) {
        assertThat(expected)
            .as("Verify DemissaoFuncionario relevant properties")
            .satisfies(
                e -> assertThat(e.getNumeroCertidaoObito()).as("check numeroCertidaoObito").isEqualTo(actual.getNumeroCertidaoObito())
            )
            .satisfies(
                e -> assertThat(e.getCnpjEmpresaSucessora()).as("check cnpjEmpresaSucessora").isEqualTo(actual.getCnpjEmpresaSucessora())
            )
            .satisfies(e -> assertThat(e.getSaldoFGTS()).as("check saldoFGTS").isEqualTo(actual.getSaldoFGTS()))
            .satisfies(e -> assertThat(e.getValorPensao()).as("check valorPensao").isEqualTo(actual.getValorPensao()))
            .satisfies(e -> assertThat(e.getValorPensaoFgts()).as("check valorPensaoFgts").isEqualTo(actual.getValorPensaoFgts()))
            .satisfies(e -> assertThat(e.getPercentualPensao()).as("check percentualPensao").isEqualTo(actual.getPercentualPensao()))
            .satisfies(e -> assertThat(e.getPercentualFgts()).as("check percentualFgts").isEqualTo(actual.getPercentualFgts()))
            .satisfies(e -> assertThat(e.getDiasAvisoPrevio()).as("check diasAvisoPrevio").isEqualTo(actual.getDiasAvisoPrevio()))
            .satisfies(e -> assertThat(e.getDataAvisoPrevio()).as("check dataAvisoPrevio").isEqualTo(actual.getDataAvisoPrevio()))
            .satisfies(e -> assertThat(e.getDataPagamento()).as("check dataPagamento").isEqualTo(actual.getDataPagamento()))
            .satisfies(e -> assertThat(e.getDataAfastamento()).as("check dataAfastamento").isEqualTo(actual.getDataAfastamento()))
            .satisfies(e -> assertThat(e.getUrlDemissional()).as("check urlDemissional").isEqualTo(actual.getUrlDemissional()))
            .satisfies(e -> assertThat(e.getCalcularRecisao()).as("check calcularRecisao").isEqualTo(actual.getCalcularRecisao()))
            .satisfies(e -> assertThat(e.getPagar13Recisao()).as("check pagar13Recisao").isEqualTo(actual.getPagar13Recisao()))
            .satisfies(
                e ->
                    assertThat(e.getJornadaTrabalhoCumpridaSemana())
                        .as("check jornadaTrabalhoCumpridaSemana")
                        .isEqualTo(actual.getJornadaTrabalhoCumpridaSemana())
            )
            .satisfies(e -> assertThat(e.getSabadoCompesado()).as("check sabadoCompesado").isEqualTo(actual.getSabadoCompesado()))
            .satisfies(
                e -> assertThat(e.getNovoVinculoComprovado()).as("check novoVinculoComprovado").isEqualTo(actual.getNovoVinculoComprovado())
            )
            .satisfies(
                e -> assertThat(e.getDispensaAvisoPrevio()).as("check dispensaAvisoPrevio").isEqualTo(actual.getDispensaAvisoPrevio())
            )
            .satisfies(e -> assertThat(e.getFgtsArrecadadoGuia()).as("check fgtsArrecadadoGuia").isEqualTo(actual.getFgtsArrecadadoGuia()))
            .satisfies(
                e ->
                    assertThat(e.getAvisoPrevioTrabalhadoRecebido())
                        .as("check avisoPrevioTrabalhadoRecebido")
                        .isEqualTo(actual.getAvisoPrevioTrabalhadoRecebido())
            )
            .satisfies(
                e ->
                    assertThat(e.getRecolherFgtsMesAnterior())
                        .as("check recolherFgtsMesAnterior")
                        .isEqualTo(actual.getRecolherFgtsMesAnterior())
            )
            .satisfies(
                e -> assertThat(e.getAvisoPrevioIndenizado()).as("check avisoPrevioIndenizado").isEqualTo(actual.getAvisoPrevioIndenizado())
            )
            .satisfies(
                e ->
                    assertThat(e.getCumprimentoAvisoPrevio())
                        .as("check cumprimentoAvisoPrevio")
                        .isEqualTo(actual.getCumprimentoAvisoPrevio())
            )
            .satisfies(e -> assertThat(e.getAvisoPrevio()).as("check avisoPrevio").isEqualTo(actual.getAvisoPrevio()))
            .satisfies(e -> assertThat(e.getSituacaoDemissao()).as("check situacaoDemissao").isEqualTo(actual.getSituacaoDemissao()))
            .satisfies(e -> assertThat(e.getTipoDemissao()).as("check tipoDemissao").isEqualTo(actual.getTipoDemissao()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemissaoFuncionarioUpdatableRelationshipsEquals(DemissaoFuncionario expected, DemissaoFuncionario actual) {
        assertThat(expected)
            .as("Verify DemissaoFuncionario relationships")
            .satisfies(e -> assertThat(e.getFuncionario()).as("check funcionario").isEqualTo(actual.getFuncionario()));
    }
}
