package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContratoFuncionarioAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContratoFuncionarioAllPropertiesEquals(ContratoFuncionario expected, ContratoFuncionario actual) {
        assertContratoFuncionarioAutoGeneratedPropertiesEquals(expected, actual);
        assertContratoFuncionarioAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContratoFuncionarioAllUpdatablePropertiesEquals(ContratoFuncionario expected, ContratoFuncionario actual) {
        assertContratoFuncionarioUpdatableFieldsEquals(expected, actual);
        assertContratoFuncionarioUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContratoFuncionarioAutoGeneratedPropertiesEquals(ContratoFuncionario expected, ContratoFuncionario actual) {
        assertThat(expected)
            .as("Verify ContratoFuncionario auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContratoFuncionarioUpdatableFieldsEquals(ContratoFuncionario expected, ContratoFuncionario actual) {
        assertThat(expected)
            .as("Verify ContratoFuncionario relevant properties")
            .satisfies(e -> assertThat(e.getSalarioFixo()).as("check salarioFixo").isEqualTo(actual.getSalarioFixo()))
            .satisfies(e -> assertThat(e.getSalarioVariavel()).as("check salarioVariavel").isEqualTo(actual.getSalarioVariavel()))
            .satisfies(e -> assertThat(e.getEstagio()).as("check estagio").isEqualTo(actual.getEstagio()))
            .satisfies(
                e -> assertThat(e.getNaturezaEstagioEnum()).as("check naturezaEstagioEnum").isEqualTo(actual.getNaturezaEstagioEnum())
            )
            .satisfies(e -> assertThat(e.getCtps()).as("check ctps").isEqualTo(actual.getCtps()))
            .satisfies(e -> assertThat(e.getSerieCtps()).as("check serieCtps").isEqualTo(actual.getSerieCtps()))
            .satisfies(
                e -> assertThat(e.getOrgaoEmissorDocumento()).as("check orgaoEmissorDocumento").isEqualTo(actual.getOrgaoEmissorDocumento())
            )
            .satisfies(
                e -> assertThat(e.getDataValidadeDocumento()).as("check dataValidadeDocumento").isEqualTo(actual.getDataValidadeDocumento())
            )
            .satisfies(e -> assertThat(e.getDataAdmissao()).as("check dataAdmissao").isEqualTo(actual.getDataAdmissao()))
            .satisfies(e -> assertThat(e.getCargo()).as("check cargo").isEqualTo(actual.getCargo()))
            .satisfies(
                e -> assertThat(e.getDescricaoAtividades()).as("check descricaoAtividades").isEqualTo(actual.getDescricaoAtividades())
            )
            .satisfies(e -> assertThat(e.getSituacao()).as("check situacao").isEqualTo(actual.getSituacao()))
            .satisfies(e -> assertThat(e.getValorSalarioFixo()).as("check valorSalarioFixo").isEqualTo(actual.getValorSalarioFixo()))
            .satisfies(
                e -> assertThat(e.getValorSalarioVariavel()).as("check valorSalarioVariavel").isEqualTo(actual.getValorSalarioVariavel())
            )
            .satisfies(
                e -> assertThat(e.getDataTerminoContrato()).as("check dataTerminoContrato").isEqualTo(actual.getDataTerminoContrato())
            )
            .satisfies(e -> assertThat(e.getDatainicioContrato()).as("check datainicioContrato").isEqualTo(actual.getDatainicioContrato()))
            .satisfies(e -> assertThat(e.getHorasATrabalhadar()).as("check horasATrabalhadar").isEqualTo(actual.getHorasATrabalhadar()))
            .satisfies(e -> assertThat(e.getCodigoCargo()).as("check codigoCargo").isEqualTo(actual.getCodigoCargo()))
            .satisfies(
                e -> assertThat(e.getCategoriaTrabalhador()).as("check categoriaTrabalhador").isEqualTo(actual.getCategoriaTrabalhador())
            )
            .satisfies(
                e -> assertThat(e.getTipoVinculoTrabalho()).as("check tipoVinculoTrabalho").isEqualTo(actual.getTipoVinculoTrabalho())
            )
            .satisfies(e -> assertThat(e.getFgtsOpcao()).as("check fgtsOpcao").isEqualTo(actual.getFgtsOpcao()))
            .satisfies(e -> assertThat(e.gettIpoDocumentoEnum()).as("check tIpoDocumentoEnum").isEqualTo(actual.gettIpoDocumentoEnum()))
            .satisfies(e -> assertThat(e.getPeriodoExperiencia()).as("check periodoExperiencia").isEqualTo(actual.getPeriodoExperiencia()))
            .satisfies(e -> assertThat(e.getTipoAdmisaoEnum()).as("check tipoAdmisaoEnum").isEqualTo(actual.getTipoAdmisaoEnum()))
            .satisfies(
                e -> assertThat(e.getPeriodoIntermitente()).as("check periodoIntermitente").isEqualTo(actual.getPeriodoIntermitente())
            )
            .satisfies(e -> assertThat(e.getIndicativoAdmissao()).as("check indicativoAdmissao").isEqualTo(actual.getIndicativoAdmissao()))
            .satisfies(e -> assertThat(e.getNumeroPisNisPasep()).as("check numeroPisNisPasep").isEqualTo(actual.getNumeroPisNisPasep()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContratoFuncionarioUpdatableRelationshipsEquals(ContratoFuncionario expected, ContratoFuncionario actual) {
        assertThat(expected)
            .as("Verify ContratoFuncionario relationships")
            .satisfies(e -> assertThat(e.getFuncionario()).as("check funcionario").isEqualTo(actual.getFuncionario()))
            .satisfies(
                e ->
                    assertThat(e.getAgenteIntegracaoEstagio())
                        .as("check agenteIntegracaoEstagio")
                        .isEqualTo(actual.getAgenteIntegracaoEstagio())
            )
            .satisfies(e -> assertThat(e.getInstituicaoEnsino()).as("check instituicaoEnsino").isEqualTo(actual.getInstituicaoEnsino()));
    }
}
