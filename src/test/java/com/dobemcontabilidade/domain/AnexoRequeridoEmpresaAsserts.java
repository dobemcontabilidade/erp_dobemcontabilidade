package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AnexoRequeridoEmpresaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnexoRequeridoEmpresaAllPropertiesEquals(AnexoRequeridoEmpresa expected, AnexoRequeridoEmpresa actual) {
        assertAnexoRequeridoEmpresaAutoGeneratedPropertiesEquals(expected, actual);
        assertAnexoRequeridoEmpresaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnexoRequeridoEmpresaAllUpdatablePropertiesEquals(
        AnexoRequeridoEmpresa expected,
        AnexoRequeridoEmpresa actual
    ) {
        assertAnexoRequeridoEmpresaUpdatableFieldsEquals(expected, actual);
        assertAnexoRequeridoEmpresaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnexoRequeridoEmpresaAutoGeneratedPropertiesEquals(
        AnexoRequeridoEmpresa expected,
        AnexoRequeridoEmpresa actual
    ) {
        assertThat(expected)
            .as("Verify AnexoRequeridoEmpresa auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnexoRequeridoEmpresaUpdatableFieldsEquals(AnexoRequeridoEmpresa expected, AnexoRequeridoEmpresa actual) {
        assertThat(expected)
            .as("Verify AnexoRequeridoEmpresa relevant properties")
            .satisfies(e -> assertThat(e.getObrigatorio()).as("check obrigatorio").isEqualTo(actual.getObrigatorio()))
            .satisfies(e -> assertThat(e.getUrlArquivo()).as("check urlArquivo").isEqualTo(actual.getUrlArquivo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnexoRequeridoEmpresaUpdatableRelationshipsEquals(
        AnexoRequeridoEmpresa expected,
        AnexoRequeridoEmpresa actual
    ) {
        assertThat(expected)
            .as("Verify AnexoRequeridoEmpresa relationships")
            .satisfies(e -> assertThat(e.getAnexoRequerido()).as("check anexoRequerido").isEqualTo(actual.getAnexoRequerido()))
            .satisfies(e -> assertThat(e.getEnquadramento()).as("check enquadramento").isEqualTo(actual.getEnquadramento()))
            .satisfies(e -> assertThat(e.getTributacao()).as("check tributacao").isEqualTo(actual.getTributacao()))
            .satisfies(e -> assertThat(e.getRamo()).as("check ramo").isEqualTo(actual.getRamo()))
            .satisfies(e -> assertThat(e.getEmpresa()).as("check empresa").isEqualTo(actual.getEmpresa()))
            .satisfies(e -> assertThat(e.getEmpresaModelo()).as("check empresaModelo").isEqualTo(actual.getEmpresaModelo()));
    }
}
