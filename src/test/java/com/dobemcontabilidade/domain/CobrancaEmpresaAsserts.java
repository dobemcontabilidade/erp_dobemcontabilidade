package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CobrancaEmpresaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCobrancaEmpresaAllPropertiesEquals(CobrancaEmpresa expected, CobrancaEmpresa actual) {
        assertCobrancaEmpresaAutoGeneratedPropertiesEquals(expected, actual);
        assertCobrancaEmpresaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCobrancaEmpresaAllUpdatablePropertiesEquals(CobrancaEmpresa expected, CobrancaEmpresa actual) {
        assertCobrancaEmpresaUpdatableFieldsEquals(expected, actual);
        assertCobrancaEmpresaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCobrancaEmpresaAutoGeneratedPropertiesEquals(CobrancaEmpresa expected, CobrancaEmpresa actual) {
        assertThat(expected)
            .as("Verify CobrancaEmpresa auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCobrancaEmpresaUpdatableFieldsEquals(CobrancaEmpresa expected, CobrancaEmpresa actual) {
        assertThat(expected)
            .as("Verify CobrancaEmpresa relevant properties")
            .satisfies(e -> assertThat(e.getDataCobranca()).as("check dataCobranca").isEqualTo(actual.getDataCobranca()))
            .satisfies(e -> assertThat(e.getValorPago()).as("check valorPago").isEqualTo(actual.getValorPago()))
            .satisfies(e -> assertThat(e.getUrlCobranca()).as("check urlCobranca").isEqualTo(actual.getUrlCobranca()))
            .satisfies(e -> assertThat(e.getUrlArquivo()).as("check urlArquivo").isEqualTo(actual.getUrlArquivo()))
            .satisfies(e -> assertThat(e.getValorCobrado()).as("check valorCobrado").isEqualTo(actual.getValorCobrado()))
            .satisfies(e -> assertThat(e.getSituacaoCobranca()).as("check situacaoCobranca").isEqualTo(actual.getSituacaoCobranca()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCobrancaEmpresaUpdatableRelationshipsEquals(CobrancaEmpresa expected, CobrancaEmpresa actual) {
        assertThat(expected)
            .as("Verify CobrancaEmpresa relationships")
            .satisfies(e -> assertThat(e.getAssinaturaEmpresa()).as("check assinaturaEmpresa").isEqualTo(actual.getAssinaturaEmpresa()))
            .satisfies(e -> assertThat(e.getFormaDePagamento()).as("check formaDePagamento").isEqualTo(actual.getFormaDePagamento()));
    }
}
