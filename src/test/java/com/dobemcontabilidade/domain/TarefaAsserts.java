package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TarefaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTarefaAllPropertiesEquals(Tarefa expected, Tarefa actual) {
        assertTarefaAutoGeneratedPropertiesEquals(expected, actual);
        assertTarefaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTarefaAllUpdatablePropertiesEquals(Tarefa expected, Tarefa actual) {
        assertTarefaUpdatableFieldsEquals(expected, actual);
        assertTarefaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTarefaAutoGeneratedPropertiesEquals(Tarefa expected, Tarefa actual) {
        assertThat(expected)
            .as("Verify Tarefa auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTarefaUpdatableFieldsEquals(Tarefa expected, Tarefa actual) {
        assertThat(expected)
            .as("Verify Tarefa relevant properties")
            .satisfies(e -> assertThat(e.getTitulo()).as("check titulo").isEqualTo(actual.getTitulo()))
            .satisfies(e -> assertThat(e.getNumeroDias()).as("check numeroDias").isEqualTo(actual.getNumeroDias()))
            .satisfies(e -> assertThat(e.getDiaUtil()).as("check diaUtil").isEqualTo(actual.getDiaUtil()))
            .satisfies(e -> assertThat(e.getValor()).as("check valor").isEqualTo(actual.getValor()))
            .satisfies(e -> assertThat(e.getNotificarCliente()).as("check notificarCliente").isEqualTo(actual.getNotificarCliente()))
            .satisfies(e -> assertThat(e.getGeraMulta()).as("check geraMulta").isEqualTo(actual.getGeraMulta()))
            .satisfies(e -> assertThat(e.getExibirEmpresa()).as("check exibirEmpresa").isEqualTo(actual.getExibirEmpresa()))
            .satisfies(e -> assertThat(e.getDataLegal()).as("check dataLegal").isEqualTo(actual.getDataLegal()))
            .satisfies(e -> assertThat(e.getPontos()).as("check pontos").isEqualTo(actual.getPontos()))
            .satisfies(e -> assertThat(e.getTipoTarefa()).as("check tipoTarefa").isEqualTo(actual.getTipoTarefa()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTarefaUpdatableRelationshipsEquals(Tarefa expected, Tarefa actual) {
        assertThat(expected)
            .as("Verify Tarefa relationships")
            .satisfies(e -> assertThat(e.getEsfera()).as("check esfera").isEqualTo(actual.getEsfera()))
            .satisfies(e -> assertThat(e.getFrequencia()).as("check frequencia").isEqualTo(actual.getFrequencia()))
            .satisfies(e -> assertThat(e.getCompetencia()).as("check competencia").isEqualTo(actual.getCompetencia()));
    }
}
