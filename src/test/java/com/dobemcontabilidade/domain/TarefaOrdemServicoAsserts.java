package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TarefaOrdemServicoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTarefaOrdemServicoAllPropertiesEquals(TarefaOrdemServico expected, TarefaOrdemServico actual) {
        assertTarefaOrdemServicoAutoGeneratedPropertiesEquals(expected, actual);
        assertTarefaOrdemServicoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTarefaOrdemServicoAllUpdatablePropertiesEquals(TarefaOrdemServico expected, TarefaOrdemServico actual) {
        assertTarefaOrdemServicoUpdatableFieldsEquals(expected, actual);
        assertTarefaOrdemServicoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTarefaOrdemServicoAutoGeneratedPropertiesEquals(TarefaOrdemServico expected, TarefaOrdemServico actual) {
        assertThat(expected)
            .as("Verify TarefaOrdemServico auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTarefaOrdemServicoUpdatableFieldsEquals(TarefaOrdemServico expected, TarefaOrdemServico actual) {
        assertThat(expected)
            .as("Verify TarefaOrdemServico relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getDescricao()).as("check descricao").isEqualTo(actual.getDescricao()))
            .satisfies(e -> assertThat(e.getNotificarCliente()).as("check notificarCliente").isEqualTo(actual.getNotificarCliente()))
            .satisfies(e -> assertThat(e.getNotificarContador()).as("check notificarContador").isEqualTo(actual.getNotificarContador()))
            .satisfies(e -> assertThat(e.getAnoReferencia()).as("check anoReferencia").isEqualTo(actual.getAnoReferencia()))
            .satisfies(e -> assertThat(e.getDataAdmin()).as("check dataAdmin").isEqualTo(actual.getDataAdmin()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTarefaOrdemServicoUpdatableRelationshipsEquals(TarefaOrdemServico expected, TarefaOrdemServico actual) {
        assertThat(expected)
            .as("Verify TarefaOrdemServico relationships")
            .satisfies(
                e ->
                    assertThat(e.getServicoContabilOrdemServico())
                        .as("check servicoContabilOrdemServico")
                        .isEqualTo(actual.getServicoContabilOrdemServico())
            );
    }
}
