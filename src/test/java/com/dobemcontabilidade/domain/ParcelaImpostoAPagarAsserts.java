package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ParcelaImpostoAPagarAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParcelaImpostoAPagarAllPropertiesEquals(ParcelaImpostoAPagar expected, ParcelaImpostoAPagar actual) {
        assertParcelaImpostoAPagarAutoGeneratedPropertiesEquals(expected, actual);
        assertParcelaImpostoAPagarAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParcelaImpostoAPagarAllUpdatablePropertiesEquals(ParcelaImpostoAPagar expected, ParcelaImpostoAPagar actual) {
        assertParcelaImpostoAPagarUpdatableFieldsEquals(expected, actual);
        assertParcelaImpostoAPagarUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParcelaImpostoAPagarAutoGeneratedPropertiesEquals(ParcelaImpostoAPagar expected, ParcelaImpostoAPagar actual) {
        assertThat(expected)
            .as("Verify ParcelaImpostoAPagar auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParcelaImpostoAPagarUpdatableFieldsEquals(ParcelaImpostoAPagar expected, ParcelaImpostoAPagar actual) {
        assertThat(expected)
            .as("Verify ParcelaImpostoAPagar relevant properties")
            .satisfies(e -> assertThat(e.getNumeroParcela()).as("check numeroParcela").isEqualTo(actual.getNumeroParcela()))
            .satisfies(e -> assertThat(e.getDataVencimento()).as("check dataVencimento").isEqualTo(actual.getDataVencimento()))
            .satisfies(e -> assertThat(e.getDataPagamento()).as("check dataPagamento").isEqualTo(actual.getDataPagamento()))
            .satisfies(e -> assertThat(e.getValor()).as("check valor").isEqualTo(actual.getValor()))
            .satisfies(e -> assertThat(e.getValorMulta()).as("check valorMulta").isEqualTo(actual.getValorMulta()))
            .satisfies(
                e -> assertThat(e.getUrlArquivoPagamento()).as("check urlArquivoPagamento").isEqualTo(actual.getUrlArquivoPagamento())
            )
            .satisfies(
                e -> assertThat(e.getUrlArquivoComprovante()).as("check urlArquivoComprovante").isEqualTo(actual.getUrlArquivoComprovante())
            )
            .satisfies(e -> assertThat(e.getMesCompetencia()).as("check mesCompetencia").isEqualTo(actual.getMesCompetencia()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParcelaImpostoAPagarUpdatableRelationshipsEquals(ParcelaImpostoAPagar expected, ParcelaImpostoAPagar actual) {
        assertThat(expected)
            .as("Verify ParcelaImpostoAPagar relationships")
            .satisfies(
                e -> assertThat(e.getParcelamentoImposto()).as("check parcelamentoImposto").isEqualTo(actual.getParcelamentoImposto())
            );
    }
}
