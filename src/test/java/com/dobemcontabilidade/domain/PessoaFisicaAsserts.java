package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PessoaFisicaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPessoaFisicaAllPropertiesEquals(PessoaFisica expected, PessoaFisica actual) {
        assertPessoaFisicaAutoGeneratedPropertiesEquals(expected, actual);
        assertPessoaFisicaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPessoaFisicaAllUpdatablePropertiesEquals(PessoaFisica expected, PessoaFisica actual) {
        assertPessoaFisicaUpdatableFieldsEquals(expected, actual);
        assertPessoaFisicaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPessoaFisicaAutoGeneratedPropertiesEquals(PessoaFisica expected, PessoaFisica actual) {
        assertThat(expected)
            .as("Verify PessoaFisica auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPessoaFisicaUpdatableFieldsEquals(PessoaFisica expected, PessoaFisica actual) {
        assertThat(expected)
            .as("Verify PessoaFisica relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getCpf()).as("check cpf").isEqualTo(actual.getCpf()))
            .satisfies(e -> assertThat(e.getDataNascimento()).as("check dataNascimento").isEqualTo(actual.getDataNascimento()))
            .satisfies(e -> assertThat(e.getTituloEleitor()).as("check tituloEleitor").isEqualTo(actual.getTituloEleitor()))
            .satisfies(e -> assertThat(e.getRg()).as("check rg").isEqualTo(actual.getRg()))
            .satisfies(e -> assertThat(e.getRgOrgaoExpditor()).as("check rgOrgaoExpditor").isEqualTo(actual.getRgOrgaoExpditor()))
            .satisfies(e -> assertThat(e.getRgUfExpedicao()).as("check rgUfExpedicao").isEqualTo(actual.getRgUfExpedicao()))
            .satisfies(e -> assertThat(e.getEstadoCivil()).as("check estadoCivil").isEqualTo(actual.getEstadoCivil()))
            .satisfies(e -> assertThat(e.getSexo()).as("check sexo").isEqualTo(actual.getSexo()))
            .satisfies(e -> assertThat(e.getUrlFotoPerfil()).as("check urlFotoPerfil").isEqualTo(actual.getUrlFotoPerfil()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPessoaFisicaUpdatableRelationshipsEquals(PessoaFisica expected, PessoaFisica actual) {}
}
