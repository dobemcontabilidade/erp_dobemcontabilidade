package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PagamentoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPagamentoAllPropertiesEquals(Pagamento expected, Pagamento actual) {
        assertPagamentoAutoGeneratedPropertiesEquals(expected, actual);
        assertPagamentoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPagamentoAllUpdatablePropertiesEquals(Pagamento expected, Pagamento actual) {
        assertPagamentoUpdatableFieldsEquals(expected, actual);
        assertPagamentoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPagamentoAutoGeneratedPropertiesEquals(Pagamento expected, Pagamento actual) {
        assertThat(expected)
            .as("Verify Pagamento auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPagamentoUpdatableFieldsEquals(Pagamento expected, Pagamento actual) {
        assertThat(expected)
            .as("Verify Pagamento relevant properties")
            .satisfies(e -> assertThat(e.getDataCobranca()).as("check dataCobranca").isEqualTo(actual.getDataCobranca()))
            .satisfies(e -> assertThat(e.getDataVencimento()).as("check dataVencimento").isEqualTo(actual.getDataVencimento()))
            .satisfies(e -> assertThat(e.getDataPagamento()).as("check dataPagamento").isEqualTo(actual.getDataPagamento()))
            .satisfies(e -> assertThat(e.getValorPago()).as("check valorPago").isEqualTo(actual.getValorPago()))
            .satisfies(e -> assertThat(e.getValorCobrado()).as("check valorCobrado").isEqualTo(actual.getValorCobrado()))
            .satisfies(e -> assertThat(e.getAcrescimo()).as("check acrescimo").isEqualTo(actual.getAcrescimo()))
            .satisfies(e -> assertThat(e.getMulta()).as("check multa").isEqualTo(actual.getMulta()))
            .satisfies(e -> assertThat(e.getJuros()).as("check juros").isEqualTo(actual.getJuros()))
            .satisfies(e -> assertThat(e.getSituacao()).as("check situacao").isEqualTo(actual.getSituacao()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPagamentoUpdatableRelationshipsEquals(Pagamento expected, Pagamento actual) {
        assertThat(expected)
            .as("Verify Pagamento relationships")
            .satisfies(e -> assertThat(e.getAssinaturaEmpresa()).as("check assinaturaEmpresa").isEqualTo(actual.getAssinaturaEmpresa()));
    }
}
