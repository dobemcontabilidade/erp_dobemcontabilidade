package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TarefaRecorrenteExecucaoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTarefaRecorrenteExecucaoAllPropertiesEquals(
        TarefaRecorrenteExecucao expected,
        TarefaRecorrenteExecucao actual
    ) {
        assertTarefaRecorrenteExecucaoAutoGeneratedPropertiesEquals(expected, actual);
        assertTarefaRecorrenteExecucaoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTarefaRecorrenteExecucaoAllUpdatablePropertiesEquals(
        TarefaRecorrenteExecucao expected,
        TarefaRecorrenteExecucao actual
    ) {
        assertTarefaRecorrenteExecucaoUpdatableFieldsEquals(expected, actual);
        assertTarefaRecorrenteExecucaoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTarefaRecorrenteExecucaoAutoGeneratedPropertiesEquals(
        TarefaRecorrenteExecucao expected,
        TarefaRecorrenteExecucao actual
    ) {
        assertThat(expected)
            .as("Verify TarefaRecorrenteExecucao auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTarefaRecorrenteExecucaoUpdatableFieldsEquals(
        TarefaRecorrenteExecucao expected,
        TarefaRecorrenteExecucao actual
    ) {
        assertThat(expected)
            .as("Verify TarefaRecorrenteExecucao relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getDescricao()).as("check descricao").isEqualTo(actual.getDescricao()))
            .satisfies(e -> assertThat(e.getDataEntrega()).as("check dataEntrega").isEqualTo(actual.getDataEntrega()))
            .satisfies(e -> assertThat(e.getDataAgendada()).as("check dataAgendada").isEqualTo(actual.getDataAgendada()))
            .satisfies(e -> assertThat(e.getOrdem()).as("check ordem").isEqualTo(actual.getOrdem()))
            .satisfies(e -> assertThat(e.getConcluida()).as("check concluida").isEqualTo(actual.getConcluida()))
            .satisfies(e -> assertThat(e.getMes()).as("check mes").isEqualTo(actual.getMes()))
            .satisfies(e -> assertThat(e.getSituacaoTarefa()).as("check situacaoTarefa").isEqualTo(actual.getSituacaoTarefa()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTarefaRecorrenteExecucaoUpdatableRelationshipsEquals(
        TarefaRecorrenteExecucao expected,
        TarefaRecorrenteExecucao actual
    ) {
        assertThat(expected)
            .as("Verify TarefaRecorrenteExecucao relationships")
            .satisfies(e -> assertThat(e.getTarefaRecorrente()).as("check tarefaRecorrente").isEqualTo(actual.getTarefaRecorrente()));
    }
}
