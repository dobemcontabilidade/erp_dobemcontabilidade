package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CnaeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCnaeAllPropertiesEquals(Cnae expected, Cnae actual) {
        assertCnaeAutoGeneratedPropertiesEquals(expected, actual);
        assertCnaeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCnaeAllUpdatablePropertiesEquals(Cnae expected, Cnae actual) {
        assertCnaeUpdatableFieldsEquals(expected, actual);
        assertCnaeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCnaeAutoGeneratedPropertiesEquals(Cnae expected, Cnae actual) {
        assertThat(expected)
            .as("Verify Cnae auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCnaeUpdatableFieldsEquals(Cnae expected, Cnae actual) {
        assertThat(expected)
            .as("Verify Cnae relevant properties")
            .satisfies(e -> assertThat(e.getCodigo()).as("check codigo").isEqualTo(actual.getCodigo()))
            .satisfies(e -> assertThat(e.getDescricao()).as("check descricao").isEqualTo(actual.getDescricao()))
            .satisfies(e -> assertThat(e.getAnexo()).as("check anexo").isEqualTo(actual.getAnexo()))
            .satisfies(e -> assertThat(e.getAtendidoFreemium()).as("check atendidoFreemium").isEqualTo(actual.getAtendidoFreemium()))
            .satisfies(e -> assertThat(e.getAtendido()).as("check atendido").isEqualTo(actual.getAtendido()))
            .satisfies(e -> assertThat(e.getOptanteSimples()).as("check optanteSimples").isEqualTo(actual.getOptanteSimples()))
            .satisfies(e -> assertThat(e.getCategoria()).as("check categoria").isEqualTo(actual.getCategoria()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCnaeUpdatableRelationshipsEquals(Cnae expected, Cnae actual) {}
}
