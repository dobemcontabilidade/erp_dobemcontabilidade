package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EnderecoPessoaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnderecoPessoaAllPropertiesEquals(EnderecoPessoa expected, EnderecoPessoa actual) {
        assertEnderecoPessoaAutoGeneratedPropertiesEquals(expected, actual);
        assertEnderecoPessoaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnderecoPessoaAllUpdatablePropertiesEquals(EnderecoPessoa expected, EnderecoPessoa actual) {
        assertEnderecoPessoaUpdatableFieldsEquals(expected, actual);
        assertEnderecoPessoaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnderecoPessoaAutoGeneratedPropertiesEquals(EnderecoPessoa expected, EnderecoPessoa actual) {
        assertThat(expected)
            .as("Verify EnderecoPessoa auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnderecoPessoaUpdatableFieldsEquals(EnderecoPessoa expected, EnderecoPessoa actual) {
        assertThat(expected)
            .as("Verify EnderecoPessoa relevant properties")
            .satisfies(e -> assertThat(e.getLogradouro()).as("check logradouro").isEqualTo(actual.getLogradouro()))
            .satisfies(e -> assertThat(e.getNumero()).as("check numero").isEqualTo(actual.getNumero()))
            .satisfies(e -> assertThat(e.getComplemento()).as("check complemento").isEqualTo(actual.getComplemento()))
            .satisfies(e -> assertThat(e.getBairro()).as("check bairro").isEqualTo(actual.getBairro()))
            .satisfies(e -> assertThat(e.getCep()).as("check cep").isEqualTo(actual.getCep()))
            .satisfies(e -> assertThat(e.getPrincipal()).as("check principal").isEqualTo(actual.getPrincipal()))
            .satisfies(e -> assertThat(e.getResidenciaPropria()).as("check residenciaPropria").isEqualTo(actual.getResidenciaPropria()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnderecoPessoaUpdatableRelationshipsEquals(EnderecoPessoa expected, EnderecoPessoa actual) {
        assertThat(expected)
            .as("Verify EnderecoPessoa relationships")
            .satisfies(e -> assertThat(e.getPessoa()).as("check pessoa").isEqualTo(actual.getPessoa()))
            .satisfies(e -> assertThat(e.getCidade()).as("check cidade").isEqualTo(actual.getCidade()));
    }
}
