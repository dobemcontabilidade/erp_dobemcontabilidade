package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PlanoContaAzulAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanoContaAzulAllPropertiesEquals(PlanoContaAzul expected, PlanoContaAzul actual) {
        assertPlanoContaAzulAutoGeneratedPropertiesEquals(expected, actual);
        assertPlanoContaAzulAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanoContaAzulAllUpdatablePropertiesEquals(PlanoContaAzul expected, PlanoContaAzul actual) {
        assertPlanoContaAzulUpdatableFieldsEquals(expected, actual);
        assertPlanoContaAzulUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanoContaAzulAutoGeneratedPropertiesEquals(PlanoContaAzul expected, PlanoContaAzul actual) {
        assertThat(expected)
            .as("Verify PlanoContaAzul auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanoContaAzulUpdatableFieldsEquals(PlanoContaAzul expected, PlanoContaAzul actual) {
        assertThat(expected)
            .as("Verify PlanoContaAzul relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getValorBase()).as("check valorBase").isEqualTo(actual.getValorBase()))
            .satisfies(e -> assertThat(e.getUsuarios()).as("check usuarios").isEqualTo(actual.getUsuarios()))
            .satisfies(e -> assertThat(e.getBoletos()).as("check boletos").isEqualTo(actual.getBoletos()))
            .satisfies(e -> assertThat(e.getNotaFiscalProduto()).as("check notaFiscalProduto").isEqualTo(actual.getNotaFiscalProduto()))
            .satisfies(e -> assertThat(e.getNotaFiscalServico()).as("check notaFiscalServico").isEqualTo(actual.getNotaFiscalServico()))
            .satisfies(e -> assertThat(e.getNotaFiscalCe()).as("check notaFiscalCe").isEqualTo(actual.getNotaFiscalCe()))
            .satisfies(e -> assertThat(e.getSuporte()).as("check suporte").isEqualTo(actual.getSuporte()))
            .satisfies(e -> assertThat(e.getSituacao()).as("check situacao").isEqualTo(actual.getSituacao()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanoContaAzulUpdatableRelationshipsEquals(PlanoContaAzul expected, PlanoContaAzul actual) {}
}
