package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PlanoContabilAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanoContabilAllPropertiesEquals(PlanoContabil expected, PlanoContabil actual) {
        assertPlanoContabilAutoGeneratedPropertiesEquals(expected, actual);
        assertPlanoContabilAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanoContabilAllUpdatablePropertiesEquals(PlanoContabil expected, PlanoContabil actual) {
        assertPlanoContabilUpdatableFieldsEquals(expected, actual);
        assertPlanoContabilUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanoContabilAutoGeneratedPropertiesEquals(PlanoContabil expected, PlanoContabil actual) {
        assertThat(expected)
            .as("Verify PlanoContabil auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanoContabilUpdatableFieldsEquals(PlanoContabil expected, PlanoContabil actual) {
        assertThat(expected)
            .as("Verify PlanoContabil relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getAdicionalSocio()).as("check adicionalSocio").isEqualTo(actual.getAdicionalSocio()))
            .satisfies(
                e -> assertThat(e.getAdicionalFuncionario()).as("check adicionalFuncionario").isEqualTo(actual.getAdicionalFuncionario())
            )
            .satisfies(e -> assertThat(e.getSociosIsentos()).as("check sociosIsentos").isEqualTo(actual.getSociosIsentos()))
            .satisfies(
                e -> assertThat(e.getAdicionalFaturamento()).as("check adicionalFaturamento").isEqualTo(actual.getAdicionalFaturamento())
            )
            .satisfies(
                e -> assertThat(e.getValorBaseFaturamento()).as("check valorBaseFaturamento").isEqualTo(actual.getValorBaseFaturamento())
            )
            .satisfies(e -> assertThat(e.getValorBaseAbertura()).as("check valorBaseAbertura").isEqualTo(actual.getValorBaseAbertura()))
            .satisfies(e -> assertThat(e.getSituacao()).as("check situacao").isEqualTo(actual.getSituacao()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanoContabilUpdatableRelationshipsEquals(PlanoContabil expected, PlanoContabil actual) {}
}
