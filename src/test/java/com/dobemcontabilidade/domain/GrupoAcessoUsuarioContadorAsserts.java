package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GrupoAcessoUsuarioContadorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGrupoAcessoUsuarioContadorAllPropertiesEquals(
        GrupoAcessoUsuarioContador expected,
        GrupoAcessoUsuarioContador actual
    ) {
        assertGrupoAcessoUsuarioContadorAutoGeneratedPropertiesEquals(expected, actual);
        assertGrupoAcessoUsuarioContadorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGrupoAcessoUsuarioContadorAllUpdatablePropertiesEquals(
        GrupoAcessoUsuarioContador expected,
        GrupoAcessoUsuarioContador actual
    ) {
        assertGrupoAcessoUsuarioContadorUpdatableFieldsEquals(expected, actual);
        assertGrupoAcessoUsuarioContadorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGrupoAcessoUsuarioContadorAutoGeneratedPropertiesEquals(
        GrupoAcessoUsuarioContador expected,
        GrupoAcessoUsuarioContador actual
    ) {
        assertThat(expected)
            .as("Verify GrupoAcessoUsuarioContador auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGrupoAcessoUsuarioContadorUpdatableFieldsEquals(
        GrupoAcessoUsuarioContador expected,
        GrupoAcessoUsuarioContador actual
    ) {
        assertThat(expected)
            .as("Verify GrupoAcessoUsuarioContador relevant properties")
            .satisfies(e -> assertThat(e.getDataExpiracao()).as("check dataExpiracao").isEqualTo(actual.getDataExpiracao()))
            .satisfies(e -> assertThat(e.getIlimitado()).as("check ilimitado").isEqualTo(actual.getIlimitado()))
            .satisfies(e -> assertThat(e.getDesabilitar()).as("check desabilitar").isEqualTo(actual.getDesabilitar()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGrupoAcessoUsuarioContadorUpdatableRelationshipsEquals(
        GrupoAcessoUsuarioContador expected,
        GrupoAcessoUsuarioContador actual
    ) {
        assertThat(expected)
            .as("Verify GrupoAcessoUsuarioContador relationships")
            .satisfies(e -> assertThat(e.getUsuarioContador()).as("check usuarioContador").isEqualTo(actual.getUsuarioContador()))
            .satisfies(e -> assertThat(e.getGrupoAcessoPadrao()).as("check grupoAcessoPadrao").isEqualTo(actual.getGrupoAcessoPadrao()));
    }
}
