package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ImpostoAPagarEmpresaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImpostoAPagarEmpresaAllPropertiesEquals(ImpostoAPagarEmpresa expected, ImpostoAPagarEmpresa actual) {
        assertImpostoAPagarEmpresaAutoGeneratedPropertiesEquals(expected, actual);
        assertImpostoAPagarEmpresaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImpostoAPagarEmpresaAllUpdatablePropertiesEquals(ImpostoAPagarEmpresa expected, ImpostoAPagarEmpresa actual) {
        assertImpostoAPagarEmpresaUpdatableFieldsEquals(expected, actual);
        assertImpostoAPagarEmpresaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImpostoAPagarEmpresaAutoGeneratedPropertiesEquals(ImpostoAPagarEmpresa expected, ImpostoAPagarEmpresa actual) {
        assertThat(expected)
            .as("Verify ImpostoAPagarEmpresa auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImpostoAPagarEmpresaUpdatableFieldsEquals(ImpostoAPagarEmpresa expected, ImpostoAPagarEmpresa actual) {
        assertThat(expected)
            .as("Verify ImpostoAPagarEmpresa relevant properties")
            .satisfies(e -> assertThat(e.getDataVencimento()).as("check dataVencimento").isEqualTo(actual.getDataVencimento()))
            .satisfies(e -> assertThat(e.getDataPagamento()).as("check dataPagamento").isEqualTo(actual.getDataPagamento()))
            .satisfies(e -> assertThat(e.getValor()).as("check valor").isEqualTo(actual.getValor()))
            .satisfies(e -> assertThat(e.getValorMulta()).as("check valorMulta").isEqualTo(actual.getValorMulta()))
            .satisfies(
                e -> assertThat(e.getUrlArquivoPagamento()).as("check urlArquivoPagamento").isEqualTo(actual.getUrlArquivoPagamento())
            )
            .satisfies(
                e -> assertThat(e.getUrlArquivoComprovante()).as("check urlArquivoComprovante").isEqualTo(actual.getUrlArquivoComprovante())
            )
            .satisfies(
                e ->
                    assertThat(e.getSituacaoPagamentoImpostoEnum())
                        .as("check situacaoPagamentoImpostoEnum")
                        .isEqualTo(actual.getSituacaoPagamentoImpostoEnum())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImpostoAPagarEmpresaUpdatableRelationshipsEquals(ImpostoAPagarEmpresa expected, ImpostoAPagarEmpresa actual) {
        assertThat(expected)
            .as("Verify ImpostoAPagarEmpresa relationships")
            .satisfies(e -> assertThat(e.getImposto()).as("check imposto").isEqualTo(actual.getImposto()));
    }
}
