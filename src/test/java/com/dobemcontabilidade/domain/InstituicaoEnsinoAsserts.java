package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class InstituicaoEnsinoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInstituicaoEnsinoAllPropertiesEquals(InstituicaoEnsino expected, InstituicaoEnsino actual) {
        assertInstituicaoEnsinoAutoGeneratedPropertiesEquals(expected, actual);
        assertInstituicaoEnsinoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInstituicaoEnsinoAllUpdatablePropertiesEquals(InstituicaoEnsino expected, InstituicaoEnsino actual) {
        assertInstituicaoEnsinoUpdatableFieldsEquals(expected, actual);
        assertInstituicaoEnsinoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInstituicaoEnsinoAutoGeneratedPropertiesEquals(InstituicaoEnsino expected, InstituicaoEnsino actual) {
        assertThat(expected)
            .as("Verify InstituicaoEnsino auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInstituicaoEnsinoUpdatableFieldsEquals(InstituicaoEnsino expected, InstituicaoEnsino actual) {
        assertThat(expected)
            .as("Verify InstituicaoEnsino relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getCnpj()).as("check cnpj").isEqualTo(actual.getCnpj()))
            .satisfies(e -> assertThat(e.getLogradouro()).as("check logradouro").isEqualTo(actual.getLogradouro()))
            .satisfies(e -> assertThat(e.getNumero()).as("check numero").isEqualTo(actual.getNumero()))
            .satisfies(e -> assertThat(e.getComplemento()).as("check complemento").isEqualTo(actual.getComplemento()))
            .satisfies(e -> assertThat(e.getBairro()).as("check bairro").isEqualTo(actual.getBairro()))
            .satisfies(e -> assertThat(e.getCep()).as("check cep").isEqualTo(actual.getCep()))
            .satisfies(e -> assertThat(e.getPrincipal()).as("check principal").isEqualTo(actual.getPrincipal()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInstituicaoEnsinoUpdatableRelationshipsEquals(InstituicaoEnsino expected, InstituicaoEnsino actual) {
        assertThat(expected)
            .as("Verify InstituicaoEnsino relationships")
            .satisfies(e -> assertThat(e.getCidade()).as("check cidade").isEqualTo(actual.getCidade()));
    }
}
