package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FuncionalidadeGrupoAcessoPadraoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionalidadeGrupoAcessoPadraoAllPropertiesEquals(
        FuncionalidadeGrupoAcessoPadrao expected,
        FuncionalidadeGrupoAcessoPadrao actual
    ) {
        assertFuncionalidadeGrupoAcessoPadraoAutoGeneratedPropertiesEquals(expected, actual);
        assertFuncionalidadeGrupoAcessoPadraoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionalidadeGrupoAcessoPadraoAllUpdatablePropertiesEquals(
        FuncionalidadeGrupoAcessoPadrao expected,
        FuncionalidadeGrupoAcessoPadrao actual
    ) {
        assertFuncionalidadeGrupoAcessoPadraoUpdatableFieldsEquals(expected, actual);
        assertFuncionalidadeGrupoAcessoPadraoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionalidadeGrupoAcessoPadraoAutoGeneratedPropertiesEquals(
        FuncionalidadeGrupoAcessoPadrao expected,
        FuncionalidadeGrupoAcessoPadrao actual
    ) {
        assertThat(expected)
            .as("Verify FuncionalidadeGrupoAcessoPadrao auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionalidadeGrupoAcessoPadraoUpdatableFieldsEquals(
        FuncionalidadeGrupoAcessoPadrao expected,
        FuncionalidadeGrupoAcessoPadrao actual
    ) {
        assertThat(expected)
            .as("Verify FuncionalidadeGrupoAcessoPadrao relevant properties")
            .satisfies(e -> assertThat(e.getAutorizado()).as("check autorizado").isEqualTo(actual.getAutorizado()))
            .satisfies(e -> assertThat(e.getDataExpiracao()).as("check dataExpiracao").isEqualTo(actual.getDataExpiracao()))
            .satisfies(e -> assertThat(e.getDataAtribuicao()).as("check dataAtribuicao").isEqualTo(actual.getDataAtribuicao()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionalidadeGrupoAcessoPadraoUpdatableRelationshipsEquals(
        FuncionalidadeGrupoAcessoPadrao expected,
        FuncionalidadeGrupoAcessoPadrao actual
    ) {
        assertThat(expected)
            .as("Verify FuncionalidadeGrupoAcessoPadrao relationships")
            .satisfies(e -> assertThat(e.getFuncionalidade()).as("check funcionalidade").isEqualTo(actual.getFuncionalidade()))
            .satisfies(e -> assertThat(e.getGrupoAcessoPadrao()).as("check grupoAcessoPadrao").isEqualTo(actual.getGrupoAcessoPadrao()))
            .satisfies(e -> assertThat(e.getPermisao()).as("check permisao").isEqualTo(actual.getPermisao()));
    }
}
