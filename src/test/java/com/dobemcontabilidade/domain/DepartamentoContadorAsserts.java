package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DepartamentoContadorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDepartamentoContadorAllPropertiesEquals(DepartamentoContador expected, DepartamentoContador actual) {
        assertDepartamentoContadorAutoGeneratedPropertiesEquals(expected, actual);
        assertDepartamentoContadorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDepartamentoContadorAllUpdatablePropertiesEquals(DepartamentoContador expected, DepartamentoContador actual) {
        assertDepartamentoContadorUpdatableFieldsEquals(expected, actual);
        assertDepartamentoContadorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDepartamentoContadorAutoGeneratedPropertiesEquals(DepartamentoContador expected, DepartamentoContador actual) {
        assertThat(expected)
            .as("Verify DepartamentoContador auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDepartamentoContadorUpdatableFieldsEquals(DepartamentoContador expected, DepartamentoContador actual) {
        assertThat(expected)
            .as("Verify DepartamentoContador relevant properties")
            .satisfies(
                e -> assertThat(e.getPercentualExperiencia()).as("check percentualExperiencia").isEqualTo(actual.getPercentualExperiencia())
            )
            .satisfies(
                e -> assertThat(e.getDescricaoExperiencia()).as("check descricaoExperiencia").isEqualTo(actual.getDescricaoExperiencia())
            )
            .satisfies(
                e -> assertThat(e.getPontuacaoEntrevista()).as("check pontuacaoEntrevista").isEqualTo(actual.getPontuacaoEntrevista())
            )
            .satisfies(e -> assertThat(e.getPontuacaoAvaliacao()).as("check pontuacaoAvaliacao").isEqualTo(actual.getPontuacaoAvaliacao()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDepartamentoContadorUpdatableRelationshipsEquals(DepartamentoContador expected, DepartamentoContador actual) {
        assertThat(expected)
            .as("Verify DepartamentoContador relationships")
            .satisfies(e -> assertThat(e.getDepartamento()).as("check departamento").isEqualTo(actual.getDepartamento()))
            .satisfies(e -> assertThat(e.getContador()).as("check contador").isEqualTo(actual.getContador()));
    }
}
