package com.dobemcontabilidade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EstrangeiroAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEstrangeiroAllPropertiesEquals(Estrangeiro expected, Estrangeiro actual) {
        assertEstrangeiroAutoGeneratedPropertiesEquals(expected, actual);
        assertEstrangeiroAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEstrangeiroAllUpdatablePropertiesEquals(Estrangeiro expected, Estrangeiro actual) {
        assertEstrangeiroUpdatableFieldsEquals(expected, actual);
        assertEstrangeiroUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEstrangeiroAutoGeneratedPropertiesEquals(Estrangeiro expected, Estrangeiro actual) {
        assertThat(expected)
            .as("Verify Estrangeiro auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEstrangeiroUpdatableFieldsEquals(Estrangeiro expected, Estrangeiro actual) {
        assertThat(expected)
            .as("Verify Estrangeiro relevant properties")
            .satisfies(e -> assertThat(e.getDataChegada()).as("check dataChegada").isEqualTo(actual.getDataChegada()))
            .satisfies(e -> assertThat(e.getDataNaturalizacao()).as("check dataNaturalizacao").isEqualTo(actual.getDataNaturalizacao()))
            .satisfies(
                e -> assertThat(e.getCasadoComBrasileiro()).as("check casadoComBrasileiro").isEqualTo(actual.getCasadoComBrasileiro())
            )
            .satisfies(
                e -> assertThat(e.getFilhosComBrasileiro()).as("check filhosComBrasileiro").isEqualTo(actual.getFilhosComBrasileiro())
            )
            .satisfies(e -> assertThat(e.getChecked()).as("check checked").isEqualTo(actual.getChecked()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEstrangeiroUpdatableRelationshipsEquals(Estrangeiro expected, Estrangeiro actual) {
        assertThat(expected)
            .as("Verify Estrangeiro relationships")
            .satisfies(e -> assertThat(e.getFuncionario()).as("check funcionario").isEqualTo(actual.getFuncionario()));
    }
}
